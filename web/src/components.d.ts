/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */
declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import 'ionicons';
import '@stencil/router';
import '@ionic/core';

import {
  MatchResults,
} from '@stencil/router';

import {
  AppHome as AppHome
} from './components/app-home/app-home';

declare global {
  interface HTMLAppHomeElement extends AppHome, HTMLStencilElement {
  }
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    "app-home": HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    "app-home": HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-home": JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {
      
      
    }
  }
}


import {
  AppLogin as AppLogin
} from './components/app-login/app-login';

declare global {
  interface HTMLAppLoginElement extends AppLogin, HTMLStencilElement {
  }
  var HTMLAppLoginElement: {
    prototype: HTMLAppLoginElement;
    new (): HTMLAppLoginElement;
  };
  interface HTMLElementTagNameMap {
    "app-login": HTMLAppLoginElement;
  }
  interface ElementTagNameMap {
    "app-login": HTMLAppLoginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-login": JSXElements.AppLoginAttributes;
    }
  }
  namespace JSXElements {
    export interface AppLoginAttributes extends HTMLAttributes {
      
      
    }
  }
}


import {
  AppProfile as AppProfile
} from './components/app-profile/app-profile';

declare global {
  interface HTMLAppProfileElement extends AppProfile, HTMLStencilElement {
  }
  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };
  interface HTMLElementTagNameMap {
    "app-profile": HTMLAppProfileElement;
  }
  interface ElementTagNameMap {
    "app-profile": HTMLAppProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-profile": JSXElements.AppProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface AppProfileAttributes extends HTMLAttributes {
      match?: MatchResults;
      
    }
  }
}


import {
  LazyImg as LazyImg
} from './components/lazy-img/lazy-img';

declare global {
  interface HTMLLazyImgElement extends LazyImg, HTMLStencilElement {
  }
  var HTMLLazyImgElement: {
    prototype: HTMLLazyImgElement;
    new (): HTMLLazyImgElement;
  };
  interface HTMLElementTagNameMap {
    "lazy-img": HTMLLazyImgElement;
  }
  interface ElementTagNameMap {
    "lazy-img": HTMLLazyImgElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "lazy-img": JSXElements.LazyImgAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyImgAttributes extends HTMLAttributes {
      alt?: string;
      src?: string;
      onLazyImgloaded?: (event: CustomEvent<HTMLImageElement>) => void;
    }
  }
}


import {
  LogoutButton as LogoutButton
} from './components/logout-button/logout-button';

declare global {
  interface HTMLLogoutButtonElement extends LogoutButton, HTMLStencilElement {
  }
  var HTMLLogoutButtonElement: {
    prototype: HTMLLogoutButtonElement;
    new (): HTMLLogoutButtonElement;
  };
  interface HTMLElementTagNameMap {
    "logout-button": HTMLLogoutButtonElement;
  }
  interface ElementTagNameMap {
    "logout-button": HTMLLogoutButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "logout-button": JSXElements.LogoutButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface LogoutButtonAttributes extends HTMLAttributes {
      
      
    }
  }
}


import {
  MyApp as MyApp
} from './components/my-app/my-app';

declare global {
  interface HTMLMyAppElement extends MyApp, HTMLStencilElement {
  }
  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    "my-app": HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    "my-app": HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "my-app": JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {
      
      
    }
  }
}


import {
  PageTabs as PageTabs
} from './components/page-tabs/page-tabs';

declare global {
  interface HTMLPageTabsElement extends PageTabs, HTMLStencilElement {
  }
  var HTMLPageTabsElement: {
    prototype: HTMLPageTabsElement;
    new (): HTMLPageTabsElement;
  };
  interface HTMLElementTagNameMap {
    "page-tabs": HTMLPageTabsElement;
  }
  interface ElementTagNameMap {
    "page-tabs": HTMLPageTabsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "page-tabs": JSXElements.PageTabsAttributes;
    }
  }
  namespace JSXElements {
    export interface PageTabsAttributes extends HTMLAttributes {
      
      
    }
  }
}


import {
  PropertiesPage as PropertiesPage
} from './components/properties-page/properties-page';

declare global {
  interface HTMLPropertiesPageElement extends PropertiesPage, HTMLStencilElement {
  }
  var HTMLPropertiesPageElement: {
    prototype: HTMLPropertiesPageElement;
    new (): HTMLPropertiesPageElement;
  };
  interface HTMLElementTagNameMap {
    "properties-page": HTMLPropertiesPageElement;
  }
  interface ElementTagNameMap {
    "properties-page": HTMLPropertiesPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "properties-page": JSXElements.PropertiesPageAttributes;
    }
  }
  namespace JSXElements {
    export interface PropertiesPageAttributes extends HTMLAttributes {
      
      onLogOut?: (event: CustomEvent) => void;
    }
  }
}


import {
  AuthInjector as AuthInjector
} from './components/services/auth-injector';

declare global {
  interface HTMLAuthInjectorElement extends AuthInjector, HTMLStencilElement {
  }
  var HTMLAuthInjectorElement: {
    prototype: HTMLAuthInjectorElement;
    new (): HTMLAuthInjectorElement;
  };
  interface HTMLElementTagNameMap {
    "auth-injector": HTMLAuthInjectorElement;
  }
  interface ElementTagNameMap {
    "auth-injector": HTMLAuthInjectorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "auth-injector": JSXElements.AuthInjectorAttributes;
    }
  }
  namespace JSXElements {
    export interface AuthInjectorAttributes extends HTMLAttributes {
      
      
    }
  }
}


import {
  DatabaseInjector as DatabaseInjector
} from './components/services/database-injector';

declare global {
  interface HTMLDatabaseInjectorElement extends DatabaseInjector, HTMLStencilElement {
  }
  var HTMLDatabaseInjectorElement: {
    prototype: HTMLDatabaseInjectorElement;
    new (): HTMLDatabaseInjectorElement;
  };
  interface HTMLElementTagNameMap {
    "database-injector": HTMLDatabaseInjectorElement;
  }
  interface ElementTagNameMap {
    "database-injector": HTMLDatabaseInjectorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "database-injector": JSXElements.DatabaseInjectorAttributes;
    }
  }
  namespace JSXElements {
    export interface DatabaseInjectorAttributes extends HTMLAttributes {
      
      
    }
  }
}


import {
  FirebaseInjector as FirebaseInjector
} from './components/services/firebase-injector';

declare global {
  interface HTMLFirebaseInjectorElement extends FirebaseInjector, HTMLStencilElement {
  }
  var HTMLFirebaseInjectorElement: {
    prototype: HTMLFirebaseInjectorElement;
    new (): HTMLFirebaseInjectorElement;
  };
  interface HTMLElementTagNameMap {
    "firebase-injector": HTMLFirebaseInjectorElement;
  }
  interface ElementTagNameMap {
    "firebase-injector": HTMLFirebaseInjectorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "firebase-injector": JSXElements.FirebaseInjectorAttributes;
    }
  }
  namespace JSXElements {
    export interface FirebaseInjectorAttributes extends HTMLAttributes {
      
      
    }
  }
}


import {
  TenantsPage as TenantsPage
} from './components/tenants-page/tenants-page';

declare global {
  interface HTMLTenantsPageElement extends TenantsPage, HTMLStencilElement {
  }
  var HTMLTenantsPageElement: {
    prototype: HTMLTenantsPageElement;
    new (): HTMLTenantsPageElement;
  };
  interface HTMLElementTagNameMap {
    "tenants-page": HTMLTenantsPageElement;
  }
  interface ElementTagNameMap {
    "tenants-page": HTMLTenantsPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "tenants-page": JSXElements.TenantsPageAttributes;
    }
  }
  namespace JSXElements {
    export interface TenantsPageAttributes extends HTMLAttributes {
      
      
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
